
import javax.swing.Timer;
import java.awt.event.*;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import java.sql.*;
import java.awt.Dimension;

/**
 *
 * @author v++
 * health advisor
 * save profile
 * start on boot
 * water,caffeine intake################
 * screen time
 * sit straight ##############
 * walk################
 * water##############
 * eyes###################
 * seasonal advise
 * stiffness##################
 * screen time warnings
 */
public class NewJFrame extends javax.swing.JFrame {

    /** Creates new form NewJFrame */
    public NewJFrame() {
        initComponents();
        adviseTimer.start();
        waterTimer.start();
        screenTimer.start();
        
        

    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    long screenTime = 0;
    Timer adviseTimer = new Timer(14400000, new ActionListener() {

        public void actionPerformed(ActionEvent evt) {
            Random advisor = new Random();
            int adv = advisor.nextInt(10);
            System.out.println(adv);
            adviceDialog.setVisible(true);

            // creates a variable to produce one among 10 advices at random
            switch (adv) {
                case 0:
                    adviceTA.setText("Sitting for long periodds of time in front of a computer at weird angle or using keyboard inappropraiately can lead to issues. Sit in the chair squarly with your arms resting at 90 degrees while they type. Donot lean or slouch");
                    break;

                case 1:
                    adviceTA.setText("Every 20 minutes look 20 metres away for 20 seconds ");
                    break;

                case 2:
                    adviceTA.setText("Walk around in your room to reduce stiffness and relieve eyestrain. ");
                    break;

                case 3:
                    adviceTA.setText("Simple stretching exercises can help relieve stiffness. Stand at you place and stretch you hands apart for 5-7 seconds.");
                    break;

                case 4:
                    adviceTA.setText("listening to soothing music and meditating will relieve stress and help you start working with renewed energy.");
                    break;

                case 5:
                    adviceTA.setText("If you have access to a treadmill jump onto it every morning before work.");
                    break;

                case 6:
                    adviceTA.setText("Sit up straight. bad posturecan hurt your back and the pain can spread to your neck and head");
                    break;

                case 7:
                    adviceTA.setText("Your monitor should be at eye level so that yo are not looking down constantly. The display should be at an arms length from your head.");
                    break;

                case 8:
                    adviceTA.setText("A good office chair will give you some great support and will mitigate lower back pain.");
                    break;

                case 9:
                    adviceTA.setText("Increase the size of your screen font so that your eyes dont strain much");
                    break;




            }
            adviceDialog.setVisible(true);
            adviceDialog.requestFocus();
            adviceDialog.setAlwaysOnTop(true);




        }
    });
    Timer waterTimer = new Timer(3600000, new ActionListener() {

        public void actionPerformed(ActionEvent evt) {
            hydrateDialog.setVisible(true);
            hydrateDialog.requestFocus();


        }
    });
    Timer screenTimer = new Timer(1000, new ActionListener() {

        public void actionPerformed(ActionEvent evt) {
            screenTime++;
            int hrs = (int) (screenTime / 3600);
            int min = (int) ((screenTime - hrs * 3600) / 60);
            int sec = (int) (screenTime - ((hrs * 3600) + (min * 60)));
            hrsLabel.setText("" + hrs);
            minLabel.setText("" + min);
            secLabel.setText("" + sec);


            


        }
    });

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        adviceDialog = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        adviceTA = new javax.swing.JTextArea();
        walkThanks = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        caffWaterFrame = new javax.swing.JFrame();
        caffIntakeBtn = new javax.swing.JButton();
        waterIntakeBtn = new javax.swing.JButton();
        chartBtn = new javax.swing.JButton();
        caffeineFrame = new javax.swing.JFrame();
        jLabel6 = new javax.swing.JLabel();
        coffeeBtn = new javax.swing.JButton();
        chocBtn = new javax.swing.JButton();
        cokeBtn = new javax.swing.JButton();
        teaBtn = new javax.swing.JButton();
        waterFrame = new javax.swing.JFrame();
        jLabel1 = new javax.swing.JLabel();
        glassWaterBtn = new javax.swing.JButton();
        bottleWaterBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        hydrateDialog = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        chartFrame = new javax.swing.JFrame();
        waterCharterBtn = new javax.swing.JButton();
        p3 = new javax.swing.JProgressBar();
        p1 = new javax.swing.JProgressBar();
        p2 = new javax.swing.JProgressBar();
        p5 = new javax.swing.JProgressBar();
        p6 = new javax.swing.JProgressBar();
        l1 = new javax.swing.JLabel();
        l2 = new javax.swing.JLabel();
        l3 = new javax.swing.JLabel();
        l4 = new javax.swing.JLabel();
        l5 = new javax.swing.JLabel();
        l6 = new javax.swing.JLabel();
        l7 = new javax.swing.JLabel();
        p8 = new javax.swing.JProgressBar();
        p9 = new javax.swing.JProgressBar();
        p10 = new javax.swing.JProgressBar();
        p12 = new javax.swing.JProgressBar();
        p13 = new javax.swing.JProgressBar();
        l8 = new javax.swing.JLabel();
        l9 = new javax.swing.JLabel();
        l10 = new javax.swing.JLabel();
        l11 = new javax.swing.JLabel();
        l12 = new javax.swing.JLabel();
        l13 = new javax.swing.JLabel();
        l14 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        analysisTA = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        p4 = new javax.swing.JProgressBar();
        p7 = new javax.swing.JProgressBar();
        p14 = new javax.swing.JProgressBar();
        p11 = new javax.swing.JProgressBar();
        caffeineCharterBtn = new javax.swing.JButton();
        screenTimeFrame = new javax.swing.JFrame();
        jLabel11 = new javax.swing.JLabel();
        secLabel = new javax.swing.JLabel();
        hrsLabel = new javax.swing.JLabel();
        minLabel = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        screenTimeAdviceTA = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        screenTimeButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        adviceDialog.setMinimumSize(new java.awt.Dimension(410, 350));
        adviceDialog.getContentPane().setLayout(null);

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("<html><b>HEALTH ADVICE</b>");
        adviceDialog.getContentPane().add(jLabel2);
        jLabel2.setBounds(160, 30, 90, 20);

        adviceTA.setColumns(20);
        adviceTA.setEditable(false);
        adviceTA.setLineWrap(true);
        adviceTA.setRows(5);
        adviceTA.setText("Every 20 minutes close your \neyes for 2 seconds. Then look\n20 meters away for 20 seconds");
        adviceTA.setWrapStyleWord(true);
        jScrollPane2.setViewportView(adviceTA);

        adviceDialog.getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(90, 60, 240, 180);

        walkThanks.setText("Thank you for the advice");
        walkThanks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                walkThanksActionPerformed(evt);
            }
        });
        adviceDialog.getContentPane().add(walkThanks);
        walkThanks.setBounds(120, 260, 190, 23);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/back.jpg"))); // NOI18N
        adviceDialog.getContentPane().add(jLabel3);
        jLabel3.setBounds(0, -40, 410, 350);

        jLabel5.setText("jLabel5");

        caffWaterFrame.setMinimumSize(new java.awt.Dimension(410, 400));
        caffWaterFrame.getContentPane().setLayout(null);

        caffIntakeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IPcoffee.jpg"))); // NOI18N
        caffIntakeBtn.setText(" Update Caffeine Intake");
        caffIntakeBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        caffIntakeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caffIntakeBtnActionPerformed(evt);
            }
        });
        caffWaterFrame.getContentPane().add(caffIntakeBtn);
        caffIntakeBtn.setBounds(40, 20, 140, 110);

        waterIntakeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IPwater.jpg"))); // NOI18N
        waterIntakeBtn.setText("Update water intake");
        waterIntakeBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        waterIntakeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waterIntakeBtnActionPerformed(evt);
            }
        });
        caffWaterFrame.getContentPane().add(waterIntakeBtn);
        waterIntakeBtn.setBounds(220, 20, 130, 110);

        chartBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IP21.jpg"))); // NOI18N
        chartBtn.setText(" 14 Days Chart");
        chartBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chartBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chartBtnActionPerformed(evt);
            }
        });
        caffWaterFrame.getContentPane().add(chartBtn);
        chartBtn.setBounds(130, 150, 140, 120);

        caffeineFrame.setMinimumSize(new java.awt.Dimension(410, 400));
        caffeineFrame.getContentPane().setLayout(null);

        jLabel6.setText("CHOOSE THE CAFFEINE SOURCE CONSUMED BY CLICKING ON IT");
        caffeineFrame.getContentPane().add(jLabel6);
        jLabel6.setBounds(50, 20, 320, 14);

        coffeeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IPcoffee.jpg"))); // NOI18N
        coffeeBtn.setText("250 mL COFFEE");
        coffeeBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        coffeeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coffeeBtnActionPerformed(evt);
            }
        });
        caffeineFrame.getContentPane().add(coffeeBtn);
        coffeeBtn.setBounds(20, 50, 150, 110);

        chocBtn.setForeground(new java.awt.Color(255, 255, 255));
        chocBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IPchocolate.jpg"))); // NOI18N
        chocBtn.setText(" 1 BAR CHOCOLATE");
        chocBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chocBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chocBtnActionPerformed(evt);
            }
        });
        caffeineFrame.getContentPane().add(chocBtn);
        chocBtn.setBounds(20, 170, 150, 120);

        cokeBtn.setForeground(new java.awt.Color(153, 153, 153));
        cokeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IPcoke.jpg"))); // NOI18N
        cokeBtn.setText("<HTML>1 GLASS<BR> CAFFEINATED<BR>BEVERAGE");
        cokeBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cokeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cokeBtnActionPerformed(evt);
            }
        });
        caffeineFrame.getContentPane().add(cokeBtn);
        cokeBtn.setBounds(230, 170, 130, 120);

        teaBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IPtea.jpg"))); // NOI18N
        teaBtn.setText("200 mL TEA");
        teaBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        teaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teaBtnActionPerformed(evt);
            }
        });
        caffeineFrame.getContentPane().add(teaBtn);
        teaBtn.setBounds(230, 50, 130, 110);

        waterFrame.setMinimumSize(new java.awt.Dimension(410, 400));
        waterFrame.getContentPane().setLayout(null);

        jLabel1.setText("WATER INTAKE");
        waterFrame.getContentPane().add(jLabel1);
        jLabel1.setBounds(160, 10, 80, 14);

        glassWaterBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IPwaterglass.jpg"))); // NOI18N
        glassWaterBtn.setText("<html><b>1 Glass Water</b>");
        glassWaterBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        glassWaterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                glassWaterBtnActionPerformed(evt);
            }
        });
        waterFrame.getContentPane().add(glassWaterBtn);
        glassWaterBtn.setBounds(20, 80, 130, 120);

        bottleWaterBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IPwaterbottle.jpg"))); // NOI18N
        bottleWaterBtn.setText("500 mL water");
        bottleWaterBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bottleWaterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottleWaterBtnActionPerformed(evt);
            }
        });
        waterFrame.getContentPane().add(bottleWaterBtn);
        bottleWaterBtn.setBounds(240, 80, 130, 120);

        jLabel7.setText("choose how much water you drank just now");
        waterFrame.getContentPane().add(jLabel7);
        jLabel7.setBounds(90, 40, 220, 14);

        hydrateDialog.setMinimumSize(new java.awt.Dimension(410, 400));
        hydrateDialog.getContentPane().setLayout(null);

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("You have not hydrated for an hour . Hydration helps your brain stay active and keeps you in good health. Please drink water and update your hydration record.");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        hydrateDialog.getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 60, 190, 180);

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IPwater.jpg"))); // NOI18N
        hydrateDialog.getContentPane().add(jLabel8);
        jLabel8.setBounds(200, 60, 200, 180);

        jLabel9.setText("<html><b> Keep yourself hydrated</b>");
        hydrateDialog.getContentPane().add(jLabel9);
        jLabel9.setBounds(130, 30, 170, 14);

        chartFrame.setMinimumSize(new java.awt.Dimension(2000, 2000));
        chartFrame.getContentPane().setLayout(null);

        waterCharterBtn.setText("show water intake chart");
        waterCharterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waterCharterBtnActionPerformed(evt);
            }
        });
        chartFrame.getContentPane().add(waterCharterBtn);
        waterCharterBtn.setBounds(90, 560, 190, 23);

        p3.setBackground(new java.awt.Color(255, 255, 255));
        p3.setForeground(new java.awt.Color(51, 153, 255));
        p3.setMaximum(2000);
        p3.setOpaque(true);
        chartFrame.getContentPane().add(p3);
        p3.setBounds(100, 100, 200, 14);

        p1.setBackground(new java.awt.Color(255, 255, 255));
        p1.setForeground(new java.awt.Color(51, 153, 255));
        p1.setMaximum(2000);
        p1.setOpaque(true);
        chartFrame.getContentPane().add(p1);
        p1.setBounds(100, 40, 200, 14);

        p2.setBackground(new java.awt.Color(255, 255, 255));
        p2.setForeground(new java.awt.Color(51, 153, 255));
        p2.setMaximum(2000);
        p2.setOpaque(true);
        chartFrame.getContentPane().add(p2);
        p2.setBounds(100, 70, 200, 14);

        p5.setBackground(new java.awt.Color(255, 255, 255));
        p5.setForeground(new java.awt.Color(51, 153, 255));
        p5.setMaximum(2000);
        p5.setOpaque(true);
        chartFrame.getContentPane().add(p5);
        p5.setBounds(100, 160, 200, 14);

        p6.setBackground(new java.awt.Color(255, 255, 255));
        p6.setForeground(new java.awt.Color(51, 153, 255));
        p6.setMaximum(2000);
        p6.setOpaque(true);
        chartFrame.getContentPane().add(p6);
        p6.setBounds(100, 190, 200, 14);

        l1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chartFrame.getContentPane().add(l1);
        l1.setBounds(20, 40, 80, 14);

        l2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chartFrame.getContentPane().add(l2);
        l2.setBounds(20, 70, 80, 14);

        l3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chartFrame.getContentPane().add(l3);
        l3.setBounds(20, 100, 80, 14);

        l4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chartFrame.getContentPane().add(l4);
        l4.setBounds(20, 130, 80, 14);

        l5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chartFrame.getContentPane().add(l5);
        l5.setBounds(20, 160, 80, 14);

        l6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chartFrame.getContentPane().add(l6);
        l6.setBounds(20, 190, 80, 14);

        l7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chartFrame.getContentPane().add(l7);
        l7.setBounds(20, 220, 80, 14);

        p8.setBackground(new java.awt.Color(255, 255, 255));
        p8.setForeground(new java.awt.Color(51, 153, 255));
        p8.setMaximum(2000);
        p8.setOpaque(true);
        chartFrame.getContentPane().add(p8);
        p8.setBounds(100, 250, 200, 14);

        p9.setBackground(new java.awt.Color(255, 255, 255));
        p9.setForeground(new java.awt.Color(51, 153, 255));
        p9.setMaximum(2000);
        p9.setOpaque(true);
        chartFrame.getContentPane().add(p9);
        p9.setBounds(100, 280, 200, 14);

        p10.setBackground(new java.awt.Color(255, 255, 255));
        p10.setForeground(new java.awt.Color(51, 153, 255));
        p10.setMaximum(2000);
        p10.setOpaque(true);
        chartFrame.getContentPane().add(p10);
        p10.setBounds(100, 310, 200, 14);

        p12.setBackground(new java.awt.Color(255, 255, 255));
        p12.setForeground(new java.awt.Color(51, 153, 255));
        p12.setMaximum(2000);
        p12.setOpaque(true);
        chartFrame.getContentPane().add(p12);
        p12.setBounds(100, 370, 200, 14);

        p13.setBackground(new java.awt.Color(255, 255, 255));
        p13.setForeground(new java.awt.Color(51, 153, 255));
        p13.setMaximum(2000);
        p13.setOpaque(true);
        chartFrame.getContentPane().add(p13);
        p13.setBounds(100, 400, 200, 14);

        l8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chartFrame.getContentPane().add(l8);
        l8.setBounds(20, 250, 80, 14);

        l9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chartFrame.getContentPane().add(l9);
        l9.setBounds(20, 280, 80, 14);

        l10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chartFrame.getContentPane().add(l10);
        l10.setBounds(20, 310, 80, 14);

        l11.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chartFrame.getContentPane().add(l11);
        l11.setBounds(20, 340, 80, 14);

        l12.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chartFrame.getContentPane().add(l12);
        l12.setBounds(20, 370, 80, 14);

        l13.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chartFrame.getContentPane().add(l13);
        l13.setBounds(20, 400, 80, 14);

        l14.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chartFrame.getContentPane().add(l14);
        l14.setBounds(20, 430, 80, 14);

        analysisTA.setColumns(20);
        analysisTA.setEditable(false);
        analysisTA.setFont(new java.awt.Font("Bodoni MT Black", 0, 18));
        analysisTA.setLineWrap(true);
        analysisTA.setRows(5);
        analysisTA.setWrapStyleWord(true);
        jScrollPane3.setViewportView(analysisTA);

        chartFrame.getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(380, 60, 270, 370);

        jLabel10.setText("ANALYSIS");
        chartFrame.getContentPane().add(jLabel10);
        jLabel10.setBounds(480, 40, 90, 14);

        p4.setBackground(new java.awt.Color(255, 255, 255));
        p4.setForeground(new java.awt.Color(51, 153, 255));
        p4.setMaximum(2000);
        p4.setOpaque(true);
        chartFrame.getContentPane().add(p4);
        p4.setBounds(100, 130, 200, 14);

        p7.setBackground(new java.awt.Color(255, 255, 255));
        p7.setForeground(new java.awt.Color(51, 153, 255));
        p7.setMaximum(2000);
        p7.setOpaque(true);
        chartFrame.getContentPane().add(p7);
        p7.setBounds(100, 220, 200, 14);

        p14.setBackground(new java.awt.Color(255, 255, 255));
        p14.setForeground(new java.awt.Color(51, 153, 255));
        p14.setMaximum(2000);
        p14.setOpaque(true);
        chartFrame.getContentPane().add(p14);
        p14.setBounds(100, 430, 200, 14);

        p11.setBackground(new java.awt.Color(255, 255, 255));
        p11.setForeground(new java.awt.Color(51, 153, 255));
        p11.setMaximum(2000);
        p11.setOpaque(true);
        chartFrame.getContentPane().add(p11);
        p11.setBounds(100, 340, 200, 14);

        caffeineCharterBtn.setText("show caffiene intake chart");
        caffeineCharterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caffeineCharterBtnActionPerformed(evt);
            }
        });
        chartFrame.getContentPane().add(caffeineCharterBtn);
        caffeineCharterBtn.setBounds(90, 530, 190, 23);

        screenTimeFrame.setMinimumSize(new java.awt.Dimension(450, 360));
        screenTimeFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                screenTimeFrameWindowClosed(evt);
            }
        });
        screenTimeFrame.getContentPane().setLayout(null);

        jLabel11.setText("YOUR CURRENT CONSEQUTIVE SCREEN TIME IS");
        screenTimeFrame.getContentPane().add(jLabel11);
        jLabel11.setBounds(60, 70, 270, 14);

        secLabel.setBackground(new java.awt.Color(255, 255, 255));
        secLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        secLabel.setOpaque(true);
        screenTimeFrame.getContentPane().add(secLabel);
        secLabel.setBounds(260, 110, 60, 30);

        hrsLabel.setBackground(new java.awt.Color(255, 255, 255));
        hrsLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        hrsLabel.setOpaque(true);
        screenTimeFrame.getContentPane().add(hrsLabel);
        hrsLabel.setBounds(50, 110, 60, 30);

        minLabel.setBackground(new java.awt.Color(255, 255, 255));
        minLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        minLabel.setOpaque(true);
        screenTimeFrame.getContentPane().add(minLabel);
        minLabel.setBounds(160, 110, 60, 30);

        jLabel15.setText("HRS");
        screenTimeFrame.getContentPane().add(jLabel15);
        jLabel15.setBounds(110, 110, 30, 30);

        jLabel16.setText("MIN");
        screenTimeFrame.getContentPane().add(jLabel16);
        jLabel16.setBounds(220, 120, 30, 20);

        jLabel17.setText("SEC");
        screenTimeFrame.getContentPane().add(jLabel17);
        jLabel17.setBounds(320, 120, 40, 14);

        screenTimeAdviceTA.setColumns(20);
        screenTimeAdviceTA.setEditable(false);
        screenTimeAdviceTA.setLineWrap(true);
        screenTimeAdviceTA.setRows(5);
        screenTimeAdviceTA.setText("You have spent a lot of time looking at the screen continuously. This may damege your eyes . Put the computer on sleep mode for some time and look at distant objects.");
        screenTimeAdviceTA.setWrapStyleWord(true);
        jScrollPane4.setViewportView(screenTimeAdviceTA);

        screenTimeFrame.getContentPane().add(jScrollPane4);
        jScrollPane4.setBounds(90, 160, 220, 150);

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/back.jpg"))); // NOI18N
        screenTimeFrame.getContentPane().add(jLabel12);
        jLabel12.setBounds(0, 0, 400, 300);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(580, 400));
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });
        getContentPane().setLayout(null);

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setText("MY ACCOUNT");
        getContentPane().add(jButton1);
        jButton1.setBounds(160, 210, 240, 20);

        jButton2.setText("MY CAFFIENE AND WATER INTAKE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(160, 250, 240, 23);

        screenTimeButton.setText("MY SCREEN TIME DETAILS");
        screenTimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                screenTimeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(screenTimeButton);
        screenTimeButton.setBounds(160, 290, 240, 23);

        jButton4.setText("HOW TO USE THIS APP");
        getContentPane().add(jButton4);
        jButton4.setBounds(160, 330, 240, 20);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/back.jpg"))); // NOI18N
        getContentPane().add(jLabel4);
        jLabel4.setBounds(4, 0, 560, 360);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        this.setLocation(500, 0);
        caffWaterFrame.setVisible(false);


    // posture warning






    }//GEN-LAST:event_formWindowActivated

    private void walkThanksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_walkThanksActionPerformed
        adviceDialog.setVisible(false);

    // TODO add your handling code here:
    }//GEN-LAST:event_walkThanksActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        caffWaterFrame.setVisible(true);
    // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void caffIntakeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caffIntakeBtnActionPerformed
        caffeineFrame.setVisible(true);

    // TODO add your handling code here:
    }//GEN-LAST:event_caffIntakeBtnActionPerformed

    private void waterIntakeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waterIntakeBtnActionPerformed
        waterFrame.setVisible(true);

    // TODO add your handling code here:
    }//GEN-LAST:event_waterIntakeBtnActionPerformed

    private void glassWaterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_glassWaterBtnActionPerformed
        waterTimer.start();

        try {

            Class.forName("java.sql.DriverManager");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/fitapp", "root", "1234");
            Statement stmt = con.createStatement();




            String q1 = "select * from waterIntake where rdate = curdate();";
            ResultSet rs = stmt.executeQuery(q1);
            boolean rdateExists = false;
            while (rs.next()) {
                rdateExists = true;

            }



            if (rdateExists) {
                String q2 = "update waterIntake set water= water+200 where rdate = curdate();";
                stmt.executeUpdate(q2);
            } else {
                String query = "Insert into waterIntake values(curdate(),200);";
                stmt.executeUpdate(query);

            }
            stmt.close();
            con.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }


    // TODO add your handling code here:
}//GEN-LAST:event_glassWaterBtnActionPerformed

    private void bottleWaterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottleWaterBtnActionPerformed
        waterTimer.start();

        try {

            Class.forName("java.sql.DriverManager");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/fitapp", "root", "1234");
            Statement stmt = con.createStatement();




            String q1 = "select * from waterIntake where rdate = curdate();";
            ResultSet rs = stmt.executeQuery(q1);
            boolean rdateExists = false;
            while (rs.next()) {
                rdateExists = true;

            }



            if (rdateExists) {
                String q2 = "update waterIntake set water= water+500 where rdate = curdate();";
                stmt.executeUpdate(q2);
            } else {
                String query = "Insert into waterIntake values(curdate(),500);";
                stmt.executeUpdate(query);

            }
            stmt.close();
            con.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

    // TODO add your handling code here:
}//GEN-LAST:event_bottleWaterBtnActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowStateChanged

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowLostFocus

    private void waterCharterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waterCharterBtnActionPerformed
        p1.setValue(0);
        p2.setValue(0);
        p3.setValue(0);
        p4.setValue(0);
        p5.setValue(0);
        p6.setValue(0);
        p7.setValue(0);
        p8.setValue(0);
        p9.setValue(0);
        p10.setValue(0);
        p11.setValue(0);
        p12.setValue(0);
        p13.setValue(0);
        p14.setValue(0);
        analysisTA.setText("");
        l1.setText("");
        l2.setText("");
        l3.setText("");
        l4.setText("");
        l5.setText("");
        l6.setText("");
        l7.setText("");
        l8.setText("");
        l9.setText("");
        l10.setText("");
        l11.setText("");
        l12.setText("");
        l13.setText("");
        l14.setText("");


        p1.setMaximum(4000);
        p2.setMaximum(4000);
        p3.setMaximum(4000);
        p4.setMaximum(4000);
        p5.setMaximum(4000);
        p6.setMaximum(4000);
        p7.setMaximum(4000);
        p8.setMaximum(4000);
        p9.setMaximum(4000);
        p10.setMaximum(4000);
        p11.setMaximum(4000);
        p12.setMaximum(4000);
        p13.setMaximum(4000);
        p14.setMaximum(4000);


        try {

            Class.forName("java.sql.DriverManager");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/fitapp", "root", "1234");
            Statement stmt = con.createStatement();
            String query = "Select distinct rdate,water from waterIntake order by rdate desc;";
            ResultSet rs = stmt.executeQuery(query);

            int i = 1;
            int sum = 0;
            int avg = 0;
            int first = 0;
            int last = 0;


            while (rs.next() && i <= 14) {
                int w = 0;
                w = rs.getInt("water");
                String date = rs.getString("rdate");
                sum = sum + w;
                avg = sum / i;

                if (i == 1) {
                    first = w;
                }

                last = w;



                switch (i) {
                    case 1:
                        p1.setValue(w);
                        l1.setText(date);
                        break;
                    case 2:
                        p2.setValue(w);
                        l2.setText(date);
                        break;
                    case 3:
                        p3.setValue(w);
                        l3.setText(date);
                        break;
                    case 4:
                        p4.setValue(w);
                        l4.setText(date);
                        break;
                    case 5:
                        p5.setValue(w);
                        l5.setText(date);
                        break;
                    case 6:
                        p6.setValue(w);
                        l6.setText(date);
                        break;
                    case 7:
                        p7.setValue(w);
                        l7.setText(date);
                        break;
                    case 8:
                        p8.setValue(w);
                        l8.setText(date);
                        break;
                    case 9:
                        p9.setValue(w);
                        l9.setText(date);
                        break;
                    case 10:
                        p10.setValue(w);
                        l10.setText(date);
                        break;
                    case 11:
                        p11.setValue(w);
                        l11.setText(date);
                        break;
                    case 12:
                        p12.setValue(w);
                        l12.setText(date);
                        break;
                    case 13:
                        p13.setValue(w);
                        l13.setText(date);
                        break;
                    case 14:
                        p14.setValue(w);
                        l14.setText(date);
                        break;

                }

                i++;


            }



            String intakeIsGoodOrNot = avg > 3700 ? "good" : "not good";
            String IsIncreasing = (first - last > 0) ? "increased" : "deteriorated";


            analysisTA.setText("Your total water intake over the last " + (i - 1) + " days is " + sum + ". Your average intake is" + avg + " which is " + intakeIsGoodOrNot + " . The intake has " + IsIncreasing + " over the last few days");




            rs.close();
            stmt.close();
            con.close();



            System.out.println(1);

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    // TODO add your handling code here:
}//GEN-LAST:event_waterCharterBtnActionPerformed

    private void chartBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chartBtnActionPerformed
        chartFrame.setVisible(true);

    // TODO add your handling code here:
    }//GEN-LAST:event_chartBtnActionPerformed

    private void coffeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coffeeBtnActionPerformed
        try {

            Class.forName("java.sql.DriverManager");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/fitapp", "root", "1234");
            Statement stmt = con.createStatement();




            String q1 = "select * from caffeineIntake where rdate = curdate();";
            ResultSet rs = stmt.executeQuery(q1);
            boolean rdateExists = false;
            while (rs.next()) {
                rdateExists = true;

            }



            if (rdateExists) {
                String q2 = "update caffeineIntake set caffiene= caffiene+80 where rdate = curdate();";
                stmt.executeUpdate(q2);
            } else {
                String query = "Insert into caffeineIntake values(curdate(),80);";
                stmt.executeUpdate(query);

            }
            stmt.close();
            con.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    // TODO add your handling code here:
    }//GEN-LAST:event_coffeeBtnActionPerformed

    private void teaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teaBtnActionPerformed
        try {

            Class.forName("java.sql.DriverManager");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/fitapp", "root", "1234");
            Statement stmt = con.createStatement();




            String q1 = "select * from caffeineIntake where rdate = curdate();";
            ResultSet rs = stmt.executeQuery(q1);
            boolean rdateExists = false;
            while (rs.next()) {
                rdateExists = true;

            }



            if (rdateExists) {
                String q2 = "update caffeineIntake set caffiene= caffiene+30 where rdate = curdate();";
                stmt.executeUpdate(q2);
            } else {
                String query = "Insert into caffeineIntake values(curdate(),30);";
                stmt.executeUpdate(query);

            }
            stmt.close();
            con.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_teaBtnActionPerformed

    private void chocBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chocBtnActionPerformed
        try {

            Class.forName("java.sql.DriverManager");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/fitapp", "root", "1234");
            Statement stmt = con.createStatement();




            String q1 = "select * from caffeineIntake where rdate = curdate();";
            ResultSet rs = stmt.executeQuery(q1);
            boolean rdateExists = false;
            while (rs.next()) {
                rdateExists = true;

            }



            if (rdateExists) {
                String q2 = "update caffeineIntake set caffiene= caffiene+10 where rdate = curdate();";
                stmt.executeUpdate(q2);
            } else {
                String query = "Insert into caffeineIntake values(curdate(),10);";
                stmt.executeUpdate(query);

            }
            stmt.close();
            con.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }   // TODO add your handling code here:
    }//GEN-LAST:event_chocBtnActionPerformed

    private void cokeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cokeBtnActionPerformed
        try {

            Class.forName("java.sql.DriverManager");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/fitapp", "root", "1234");
            Statement stmt = con.createStatement();




            String q1 = "select * from caffeineIntake where rdate = curdate();";
            ResultSet rs = stmt.executeQuery(q1);
            boolean rdateExists = false;
            while (rs.next()) {
                rdateExists = true;

            }



            if (rdateExists) {
                String q2 = "update caffeineIntake set caffiene= caffiene+30 where rdate = curdate();";
                stmt.executeUpdate(q2);
            } else {
                String query = "Insert into caffeineIntake values(curdate(),30);";
                stmt.executeUpdate(query);

            }
            stmt.close();
            con.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    // TODO add your handling code here:
    }//GEN-LAST:event_cokeBtnActionPerformed

    private void caffeineCharterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caffeineCharterBtnActionPerformed

        p1.setValue(0);
        p2.setValue(0);
        p3.setValue(0);
        p4.setValue(0);
        p5.setValue(0);
        p6.setValue(0);
        p7.setValue(0);
        p8.setValue(0);
        p9.setValue(0);
        p10.setValue(0);
        p11.setValue(0);
        p12.setValue(0);
        p13.setValue(0);
        p14.setValue(0);
        analysisTA.setText("");
        l1.setText("");
        l2.setText("");
        l3.setText("");
        l4.setText("");
        l5.setText("");
        l6.setText("");
        l7.setText("");
        l8.setText("");
        l9.setText("");
        l10.setText("");
        l11.setText("");
        l12.setText("");
        l13.setText("");
        l14.setText("");

        p1.setMaximum(400);
        p2.setMaximum(400);
        p3.setMaximum(400);
        p4.setMaximum(400);
        p5.setMaximum(400);
        p6.setMaximum(400);
        p7.setMaximum(400);
        p8.setMaximum(400);
        p9.setMaximum(400);
        p10.setMaximum(400);
        p11.setMaximum(400);
        p12.setMaximum(400);
        p13.setMaximum(400);
        p14.setMaximum(400);





        try {

            Class.forName("java.sql.DriverManager");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/fitapp", "root", "1234");
            Statement stmt = con.createStatement();
            String query = "Select distinct rdate,caffeine from caffeineIntake order by rdate desc;";
            ResultSet rs = stmt.executeQuery(query);

            int i = 1;
            int sum = 0;
            int avg = 0;
            int first = 0;
            int last = 0;


            while (rs.next() && i <= 14) {
                int w = 0;
                w = rs.getInt("caffeine");
                String date = rs.getString("rdate");
                sum = sum + w;
                avg = sum / i;

                if (i == 1) {
                    first = w;
                }

                last = w;



                switch (i) {
                    case 1:
                        p1.setValue(w);
                        l1.setText(date);
                        break;
                    case 2:
                        p2.setValue(w);
                        l2.setText(date);
                        break;
                    case 3:
                        p3.setValue(w);
                        l3.setText(date);
                        break;
                    case 4:
                        p4.setValue(w);
                        l4.setText(date);
                        break;
                    case 5:
                        p5.setValue(w);
                        l5.setText(date);
                        break;
                    case 6:
                        p6.setValue(w);
                        l6.setText(date);
                        break;
                    case 7:
                        p7.setValue(w);
                        l7.setText(date);
                        break;
                    case 8:
                        p8.setValue(w);
                        l8.setText(date);
                        break;
                    case 9:
                        p9.setValue(w);
                        l9.setText(date);
                        break;
                    case 10:
                        p10.setValue(w);
                        l10.setText(date);
                        break;
                    case 11:
                        p11.setValue(w);
                        l11.setText(date);
                        break;
                    case 12:
                        p12.setValue(w);
                        l12.setText(date);
                        break;
                    case 13:
                        p13.setValue(w);
                        l13.setText(date);
                        break;
                    case 14:
                        p14.setValue(w);
                        l14.setText(date);
                        break;

                }

                i++;


            }


            String intakeIsGoodOrNot = avg < 400 ? "good" : "not good";
            String IsIncreasing = (first - last > 0) ? "increased" : "deteriorated";


            analysisTA.setText("Your total caffeine intake over the last " + (i - 1) + " days is " + sum + ". Your average intake is" + avg + " which is " + intakeIsGoodOrNot + " . The intake has " + IsIncreasing + " over the last few days");





            rs.close();
            stmt.close();
            con.close();



            System.out.println(1);

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }        // TODO add your handling code here:
}//GEN-LAST:event_caffeineCharterBtnActionPerformed

    private void screenTimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_screenTimeButtonActionPerformed
        screenTimeFrame.setVisible(true);



    // TODO add your handling code here:
    }//GEN-LAST:event_screenTimeButtonActionPerformed

    private void screenTimeFrameWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_screenTimeFrameWindowClosed
    screenTimeAdviceTA.setVisible(false);

        // TODO add your handling code here:
    }//GEN-LAST:event_screenTimeFrameWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog adviceDialog;
    private javax.swing.JTextArea adviceTA;
    private javax.swing.JTextArea analysisTA;
    private javax.swing.JButton bottleWaterBtn;
    private javax.swing.JButton caffIntakeBtn;
    private javax.swing.JFrame caffWaterFrame;
    private javax.swing.JButton caffeineCharterBtn;
    private javax.swing.JFrame caffeineFrame;
    private javax.swing.JButton chartBtn;
    private javax.swing.JFrame chartFrame;
    private javax.swing.JButton chocBtn;
    private javax.swing.JButton coffeeBtn;
    private javax.swing.JButton cokeBtn;
    private javax.swing.JButton glassWaterBtn;
    private javax.swing.JLabel hrsLabel;
    private javax.swing.JDialog hydrateDialog;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel l1;
    private javax.swing.JLabel l10;
    private javax.swing.JLabel l11;
    private javax.swing.JLabel l12;
    private javax.swing.JLabel l13;
    private javax.swing.JLabel l14;
    private javax.swing.JLabel l2;
    private javax.swing.JLabel l3;
    private javax.swing.JLabel l4;
    private javax.swing.JLabel l5;
    private javax.swing.JLabel l6;
    private javax.swing.JLabel l7;
    private javax.swing.JLabel l8;
    private javax.swing.JLabel l9;
    private javax.swing.JLabel minLabel;
    private javax.swing.JProgressBar p1;
    private javax.swing.JProgressBar p10;
    private javax.swing.JProgressBar p11;
    private javax.swing.JProgressBar p12;
    private javax.swing.JProgressBar p13;
    private javax.swing.JProgressBar p14;
    private javax.swing.JProgressBar p2;
    private javax.swing.JProgressBar p3;
    private javax.swing.JProgressBar p4;
    private javax.swing.JProgressBar p5;
    private javax.swing.JProgressBar p6;
    private javax.swing.JProgressBar p7;
    private javax.swing.JProgressBar p8;
    private javax.swing.JProgressBar p9;
    private javax.swing.JTextArea screenTimeAdviceTA;
    private javax.swing.JButton screenTimeButton;
    private javax.swing.JFrame screenTimeFrame;
    private javax.swing.JLabel secLabel;
    private javax.swing.JButton teaBtn;
    private javax.swing.JButton walkThanks;
    private javax.swing.JButton waterCharterBtn;
    private javax.swing.JFrame waterFrame;
    private javax.swing.JButton waterIntakeBtn;
    // End of variables declaration//GEN-END:variables
}
